---
version: 2

references:
  build: &build
    working_directory: ~/build
    steps:
      - checkout
      - run:
         name: Save build versions
         command: |
           echo "node: ${NODE_VERSION}" >> .versions
           echo "yarn: ${YARN_VERSION}" >> .versions
      - restore_cache:
          key: yarn-cache
      - restore_cache:
          key: module-cache-{{ checksum ".versions" }}-{{ checksum "yarn.lock" }}
      - run:
          name: Set yarn cache
          command: yarn config set cache-folder $HOME/.yarn-cache
      - run:
          name: Add npm authentication token
          command: echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' > .npmrc
      - run:
          name: Install dependencies
          command: yarn install --pure-lockfile
      - save_cache:
          key: yarn-cache
          paths: $HOME/.yarn-cache
      - save_cache:
          key: module-cache-{{ checksum ".versions" }}-{{ checksum "yarn.lock" }}
          paths: node_modules
      - run:
          name: Build package
          command: yarn run package
      - run:
          name: Codecov
          command: |
            if [[ "${COVERAGE}" == 'true' && -n "${CODECOV_TOKEN}" ]]; then
              yarn global add codecov
              codecov
            fi
      - deploy:
          name: Publish package
          command: |
            if [[ "${PUBLISH}" == 'true' && \
              ("${CIRCLE_BRANCH}" == 'master' || "${CIRCLE_BRANCH}" =~ ^v[0-9]) \
            ]]; then
              apt-get update
              apt-get install -y jq
              pkg_name=$(jq -r '.name' package.json)
              pkg_version=$(jq -r '.version' package.json)
              if [[ "$(git log -1 --pretty='%s')" == "${pkg_version}" ]]; then
                if [[ -z "$(npm view ${pkg_name}@${pkg_version})" ]]; then
                  pkg_files=(*.tgz)
                  npm publish $(echo $pkg_files)
                fi
              fi
            fi

jobs:
  node-8:
    environment:
      COVERAGE: 'true'
    docker:
      - image: node:8
    <<: *build
  node-7:
    docker:
      - image: node:7
    <<: *build
  node-boron:
    environment:
      PUBLISH: 'true'
    docker:
      - image: node:boron
    <<: *build

workflows:
  version: 2
  default:
    jobs:
      - node-8
      - node-7
      - node-boron:
          requires:
            - node-8
            - node-7
